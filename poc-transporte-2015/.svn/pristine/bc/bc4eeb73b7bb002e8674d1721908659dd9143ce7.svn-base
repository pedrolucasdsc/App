'''
Created on 26/01/2015

@author: pcosta
'''
import copy
import pika 
import codecs
from tweepy.streaming import StreamListener
import json
import pymongo
import sys
from collections import namedtuple
import pysolr
import pytz
from TweetSolrDocument import TweetSolrDocument
from threading import Thread

sys.argv.extend(['config.json'])
local_tz = pytz.timezone('America/Sao_Paulo')
lstTwitter = None
config = None

class ListObjTwitter(StreamListener):  
    def __init__(self, arqConfig):
        self.lstobjTwetter = []
        self.arqConfig = arqConfig
        return
    
    def len(self):
        return len(self.lstobjTwetter)
    
    def getList(self):
        return copy.copy(self.lstobjTwetter)
    
    def clear(self):
        self.lstobjTwetter = []
        return

    def add(self, data):
        try:
            tweet = json.loads(data)
            tweet['filters'] = self.arqConfig.twitter.filters
            solrDoc = TweetSolrDocument(tweet, self.arqConfig)
 
            self.lstobjTwetter.append({
             "solr":[{"id":solrDoc.id,
                "hashtags":solrDoc.hashtags,
                "reply_to_user_id":solrDoc.reply_to_user_id,
                "reply_to_screen_name":solrDoc.reply_to_screen_name,
                "reply_to_status_id":solrDoc.reply_to_status_id,
                "location":solrDoc.location.reverse(),
                "latitude":solrDoc.latitude,
                "longitude":solrDoc.longitude,
                "cd_geocodd":solrDoc.geocodd,
                "city":solrDoc.city,
                "number_of_retweets":solrDoc.number_of_retweets,
                "source":solrDoc.source,
                "sender_user_id":solrDoc.sender_user_id,
                "sender_screen_name":solrDoc.sender_screen_name,
                "sender_name":solrDoc.sender_name,
                "is_favorited":solrDoc.is_favorited,
                "is_retweet":solrDoc.is_retweet,
                "url_user_image": solrDoc.url_user_image,
                "url_entities_list":solrDoc.url_entities_list,
                "user_mention_list":solrDoc.user_mention_list,
                "user_mention_screen_name":solrDoc.user_mention_screen_name,
                "user_followers_count":solrDoc.user_followers_count,
                "user_statuses_count":solrDoc.user_statuses_count,
                "creation_date": solrDoc.creation_date,
                "filters": solrDoc.filters,
                "twitter_text": solrDoc.raw_text,
                "pre_process_text":solrDoc.text,
                "reach":solrDoc.reach,
                "sentiment":solrDoc.sentiment,
                "float_sentiment":solrDoc.float_sentiment,
                "sentimentB":solrDoc.sentimentB,
                "sentimentC":solrDoc.sentimentC,
                "topic": solrDoc.topic,
                "source_text":solrDoc.source_text,
                "image_face_recognition":solrDoc.image_face_recognition,
                "user_gender":solrDoc.user_gender,
                "user_age":solrDoc.user_age,
                "user_age_range":solrDoc.user_age_range,
                "filters":solrDoc.filters
                }],
            "mongo":tweet
            })
            print(solrDoc.raw_text.encode("utf8"))
            return True
        
        except Exception as inst:
            print (type(inst))
            print (inst.args)
            return False

#--------------------------------------------------------------------------------------------1

class thCommit(Thread):

    def __init__ (self, lstObjTwetter, arqConfig):
        Thread.__init__(self)
        self.lstObjTwetter = lstObjTwetter

        #conexão solr
        self.solr = pysolr.Solr('http://'+arqConfig.solr.server+':'+arqConfig.solr.port+'/solr/'+ arqConfig.solr.collection, timeout=16)
        
        #conexão mongo
        connection = pymongo.Connection("mongodb://" + arqConfig.mongodb.server, safe=True)
        db = connection[arqConfig.mongodb.database]
        self.tweets = db[arqConfig.mongodb.collection]

    def run(self):
        for item in self.lstObjTwetter:
            self.tweets.insert(item["mongo"])
            self.solr.add(item["mongo"])
            self.solr.commit()

def callback(ch, method, properties, body):
    global lstTwitter
    global config 
    if(lstTwitter.len() < int(config.lenghtOfListCommit)):
        lstTwitter.add(body)
    else:
        thCommit(lstTwitter.getList(), config)
        thCommit.start()
        lstTwitter.clear()
        lstTwitter.add(body)

def main():
    #Lê arquivo config
    json_config=codecs.open(sys.argv[1], "r", "utf-8")
    global config 
    config = json.loads(json_config.read(), object_hook=lambda d: namedtuple('X', d.keys())(*d.values()))
    json_config.close();
    global lstTwitter 
    lstTwitter = ListObjTwitter(config)
    
    #start rabbit   
    connectionRabbit = pika.BlockingConnection(pika.ConnectionParameters(str(config.rabbit.server))) 
    channel = connectionRabbit.channel()
    channel.basic_consume(callback,queue=str(config.rabbit.queue), no_ack=True)
    print ' [*] Waiting for messages. To exit press CTRL+C'
    channel.start_consuming()
    return

if __name__ == '__main__':
    main()
