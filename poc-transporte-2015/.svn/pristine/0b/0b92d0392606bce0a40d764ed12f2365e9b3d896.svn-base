#-------------------------------------------------------------------------------
# Name:        module2
# Purpose:
#
# Author:      llima
#
# Created:     17/11/2014
# Copyright:   (c) llima 2014
# Licence:     <your licence>
#-------------------------------------------------------------------------------1
# -*- coding: utf-8 -*-
import re
import codecs



from tweepy.streaming import StreamListener
from tweepy import OAuthHandler
from tweepy import Stream
import json
import pymongo
import codecs
import sys
from collections import namedtuple
from datetime import datetime, timedelta
from email.utils import parsedate_tz
import pysolr
import pytz
from TweetSolrDocument import TweetSolrDocument
import tweepy
local_tz = pytz.timezone('America/Sao_Paulo')

def to_datetime(datestring):
    time_tuple = parsedate_tz(datestring.strip())
    dt = datetime(*time_tuple[:6])
    return dt - timedelta(seconds=time_tuple[-1])
def tweet_pre_process(t):
    #substituindo hashtags pela tag HT
    text = t['text']
    for hash in t['entities']['hashtags']:
            text = text.replace(hash['text'], 'HT')
    #subsituindo URLS encontradas pela tag URL
    for url in t['entities']['urls']:
            text = text.replace(url['url'], 'URL')
    #substituindo usuarios pela tag USR
    for user in t['entities']['user_mentions']:
            text = replace(user["screen_name"], 'USR')
    return text

def getReach(twitterID, api):

        reach = 0
        result = api.retweeters(id=twitterID, count=1000)
        print (str(twitterID))
        if len(result) > 0 :
            retweet_users = api.lookup_users(result)
            count = 1
            total = len(result)
            for u in retweet_users:
                print (u.name + ":" +str(count) + "/" +  str(total))
                count += 1
                reach += u.followers_count

        print (reach);
        return reach;



sys.argv.extend(['config.json'])

#This is a basic listener that just prints received tweets to stdout.
class StdOutListener(StreamListener):
    def __init__(self, config, auth):

        self.connection = pymongo.Connection("mongodb://" + config.mongodb.server, safe=True)
        self.solr = pysolr.Solr('http://'+config.solr.server+':'+config.solr.port+'/solr/'+ config.solr.collection, timeout=10)

        self.db=self.connection[config.mongodb.database]
        self.tweets = self.db[config.mongodb.collection]
        self.filters = config.twitter.filters.split(',')
        self.api = tweepy.API(auth)
        self.config = config
    def getSentiment(text):
        pass

    def getReach(twitterID, api):
        try:
            reach = 0
            result = api.retweeters(id=twitterID, count=1000)
            if len(result) > 0 :
                retweet_users = api.lookup_users(result)
                count = 1
                total = len(result)
                for u in retweet_users:
                    print (u.name + ":" +str(count) + "/" +  str(total))
                    count += 1
                    reach += u.followers_count

            print (reach);
            return reach;
        except:
            return -1

    def on_data(self, data):
        try:
            tweet = json.loads(data)
            tweet['filters'] = self.filters

            solrDoc =TweetSolrDocument(tweet, False)
            #solrDoc.reach = getReach(solrDoc.id, self.api);
            self.tweets.insert(tweet)
            self.solr.add([{
                "id":solrDoc.id,
                "hashtags":solrDoc.hashtags,
                "reply_to_user_id":solrDoc.reply_to_user_id,
                "reply_to_screen_name":solrDoc.reply_to_screen_name,
                "reply_to_status_id":solrDoc.reply_to_status_id,
                "location":solrDoc.location,
                "location_0_coordinate":solrDoc.location_0_coordinate,
                "location_1_coordinate":solrDoc.location_1_coordinate,
                "city":solrDoc.city,
                "number_of_retweets":solrDoc.number_of_retweets,
                "source":solrDoc.source,
                "sender_user_id":solrDoc.sender_user_id,
                "sender_screen_name":solrDoc.sender_screen_name,
                "sender_name":solrDoc.sender_name,
                "is_favorited":solrDoc.is_favorited,
                "is_retweet":solrDoc.is_retweet,
                "url_user_image": solrDoc.url_user_image,
                "url_entities_list":solrDoc.url_entities_list,
                "user_mention_list":solrDoc.user_mention_list,
                "user_mention_screen_name":solrDoc.user_mention_screen_name,
                "user_followers_count":solrDoc.user_followers_count,
                "user_statuses_count":solrDoc.user_statuses_count,
                "user_listed_count": solrDoc.user_listed_count,
                "creation_date": solrDoc.creation_date,
                "filters": self.filters,
                "twitter_text": solrDoc.raw_text,
                "pre_process_text":solrDoc.text,
                "reach":solrDoc.reach,
                "sentiment":solrDoc.sentiment,
                "cd_geocodd":getDistrictCode(solrDoc),
                "topic":"unclassified"
                }])
            print(solrDoc.raw_text.encode("utf8"))
            #self.solr.commit()




            return True
        except Exception as inst:
            print (type(inst))
            print (inst.args)
            return True

    def on_error(self, status):
        print (status)

#--------------------------------------------------------------------------------------------1


def main():
    #This handles Twitter authetification and the connection to Twitter Streaming API
    #Variables that contains the user credentials to access Twitter API
    if len(sys.argv) < 2:
        print ("use python twitterExtractor.py <<arquivo_de_configuracao.json>>")
    else:
        json_config=codecs.open(sys.argv[1],"r", "utf-8")
        # transforma json em objeto python
        config = json.loads(json_config.read(), object_hook=lambda d: namedtuple('X', d.keys())(*d.values()))
        json_config.close();
        auth = OAuthHandler(config.twitter.consumer_key, config.twitter.consumer_secret)
        auth.set_access_token(config.twitter.access_token, config.twitter.access_token_secret)

        l = StdOutListener(config, auth)
        stream = Stream(auth, l)

        #This line filter Twitter Streams to capture data by the keywords: 'python', 'javascript', 'ruby'

        print(config.twitter.filters)
        stream.filter(track=config.twitter.filters.split(','))

if __name__ == '__main__':
    main()
