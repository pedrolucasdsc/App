import pytz
from datetime import datetime, timedelta
from email.utils import parsedate_tz
from pymongo import Connection
import unirest

local_tz = pytz.timezone('America/Sao_Paulo')
unirest.timeout(3600)
config = None

def to_datetime(datestring):
    time_tuple = parsedate_tz(datestring.strip())
    dt = datetime(*time_tuple[:6])
    return dt - timedelta(seconds=time_tuple[-1])

def tweet_pre_process(t):
    #substituindo hashtags pela tag HT
    text = t['text']
    for hash in t['entities']['hashtags']:
            text = text.replace(hash['text'], 'HT')
    #subsituindo URLS encontradas pela tag URL
    for url in t['entities']['urls']:
            text = text.replace(url['url'], 'URL')
    #substituindo usuarios pela tag USR
    for user in t['entities']['user_mentions']:
            text = text.replace(user["screen_name"], 'USR')
    return text

def ExtractorElementWebPage(jsonFind):
    global config
    return unirest.post("http://" + config.ExtractorElementWebPageApi.server + ":" + config.ExtractorElementWebPageApi.port + "/" + config.ExtractorElementWebPageApi.title, headers = { " Accept " : " application/json " }, params = {jsonFind})


def getJsonFaceRecognition(urlImage):
    global config
    return unirest.post("http://" + config.faceRecognitionApi.server + ":" + config.faceRecognitionApi.port + "/" + config.faceRecognitionApi.title, headers = { " Accept " : " application/json " }, params = { "mashape" : config.faceRecognitionApi.mashape, "linkImg" : urlImage})

def getDistrictCode():
    return {}
    connection = Connection(config.mongodbSpatial.server)
    db = connection[config.mongodbSpatial.database]
    
def getSentiment(text):
    global config
    return unirest.post("http://" + config.sentimentalAnalysisApi.server + ":" + config.sentimentalAnalysisApi.port + "/" + config.sentimentalAnalysisApi.title, headers = { " Accept " : " application/json " }, params = {"text" : text})


class TweetSolrDocument():
    def __init__(self, t, arqConfig):
        global config
        config = arqConfig
        
        self.id = t['id'] # twitter_id
        self.hashtags =[]
        for hash in t['entities']['hashtags']:
            self.hashtags.append(hash['text'])
        self.reply_to_user_id = t['in_reply_to_user_id']
        self.reply_to_screen_name= t['in_reply_to_screen_name']
        self.reply_to_status_id= t['in_reply_to_status_id']
        self.location = []
        self.latitude = None
        self.longitude = None
        if t['coordinates'] != None:
            self.location= str(t['coordinates']['coordinates'][1]) + "," + str(t['coordinates']['coordinates'][0])
            self.latitude = t['coordinates']['coordinates'][0]
            self.longitude = t['coordinates']['coordinates'][1]
        self.city = t['user']['location']
        self.number_of_retweets= t['retweet_count']
        self.source= t['source']
        self.raw_text = t['text']
        self.text=tweet_pre_process(t)
        self.sender_user_id= t['user']['id']
        self.sender_screen_name= t['user']['screen_name']
        self.sender_name= t['user']['name']
        self.is_favorited= t['favorited']
        self.is_retweet= t['retweeted']
        self.url_user_image = t['user']['profile_image_url']
        self.user_followers_count = t['user']['followers_count'] #The number of followers the author of a Tweet has on Twitter.
        self.user_statuses_count = t['user']['statuses_count'] #The total number of Tweets and Retweets a Twitter user has posted.
        self.user_listed_count = t['user']['listed_count'] #The number of Twitter lists on which the author of a Tweet appears.
        self.url_entities_list=[]
        for url in t['entities']['urls']:
            self.url_entities_list.append(url['url'])
        self.user_mention_list = []
        self.user_mention_screen_name= []
        for user in t['entities']['user_mentions']:
            self.user_mention_list.append(user["id"])
            self.user_mention_screen_name.append(user["screen_name"])
        self.creation_date= local_tz.localize(to_datetime(t['created_at']))
        self.filters = t['filters']
        
        #ValoreSimuloados
        self.reach = -1
        self.sentiment = 0
        self.float_sentiment = -0.1
        self.sentimentB = -0.1
        self.sentimentC = -0.1
        self.topic = 'unclassified'
        self.source_text = None
        self.geocodd = -1
        
        #ExtractorUrlImageTwitter
        self.image_face_recognition = ""
        jsonExtractorUrlImageTwitter = ExtractorElementWebPage({"urlWebPage":"https://twitter.com/" + self.sender_screen_name.strip(), "tag":"img", "find":{ "class" : "ProfileAvatar-image"}})
        if 'element' in jsonExtractorUrlImageTwitter:
            self.image_face_recognition = jsonExtractorUrlImageTwitter['element']['src']
        
        #FaceRecognition
        self.user_gender = None
        self.user_age = -1
        self.user_age_range = -1
        if self.image_face_recognition != "":
            jsonFaceRecognition = getJsonFaceRecognition(self.image_face_recognition)
            if 'attribute' in jsonFaceRecognition.body["face"]:
                self.user_gender = jsonFaceRecognition.body['face']['attribute']['gender']['value']
                self.user_age = int(jsonFaceRecognition.body['face']['attribute']['age']['value'])
                self.user_age_range = int(jsonFaceRecognition.body['face']['attribute']['age']['range'])

                
        
        