# -*- coding: utf-8 -*-
import sys
import twitter
from ezute_make_twitter_request import make_twitter_request
import functools

#SCREEN_NAME = sys.argv[1]
#MAX_IDS = int(sys.argv[2])

SCREEN_NAME = "lglima"
MAX_IDS = 200

def get_info_by_id(t, ids):

    id_to_info = {}

    while len(ids) > 0:

        # Processando 100 ids de cada vez...
        ids_str = ','.join([str(_id) for _id in ids[:100]])
        ids = ids[100:]
        response = make_twitter_request(t,
                                      getattr(getattr(t, "users"), "lookup"),
                                      user_id=ids_str)
        if response is None:
            break
        if type(response) is dict:  # Handle Twitter API quirk
            response = [response]
        for user_info in response:
            id_to_info[user_info['id']] = user_info
    return id_to_info

def get_info_by_screen_name(t, screen_names):

    sn_to_info = {}

    while len(screen_names) > 0:

        # Process 100 ids at a time...

        screen_names_str = ','.join([str(sn) for sn in screen_names[:100]])
        screen_names = screen_names[100:]

        response = make_twitter_request(t,
                                      getattr(getattr(t, "users"), "lookup"),
                                      screen_name=screen_names_str)

        if response is None:
            break

        if type(response) is dict:  # Handle Twitter API quirk
            response = [response]

        for user_info in response:
            sn_to_info[user_info['screen_name']] = user_info

    return sn_to_info

if __name__ == '__main__':

    # Not authenticating lowers your rate limit to 150 requests per hr.
    # Authenticate to get 350 requests per hour.

    token = "35251380-AoWytdKUvXN3gv7PUibIsLIENMBg4ftG3qVly2bFK"
    token_secret = "yqLbNpsvF3RxrOno9her88kqGStPkC7qeNsSXKvz04759"
    con_key = "ILWvCiPhgQvODwHERRpdCTm6k"
    con_secret = "ElMxL0Oo0kvQOixbDGzth95GgSAAsUo7qqW0g3zy6bfgQ8TZKG"
    auth=twitter.OAuth(token, token_secret, con_key, con_secret)
    t = twitter.Twitter(domain='api.twitter.com', auth=auth, api_version='1.1')
    # You could call make_twitter_request(t, t.friends.ids, *args, **kw) or
    # use functools to "partially bind" a new callable with these parameters

    get_friends_ids = functools.partial(make_twitter_request, t, t.friends.ids)

    # XXX: Ditto if you want to do the same thing to get followers...

    get_followers_ids = functools.partial(make_twitter_request, t, t.followers.ids)

    cursor = -1
    ids = []
    while cursor != 0:

        # Use make_twitter_request via the partially bound callable...

        #response = get_friends_ids(screen_name=SCREEN_NAME, cursor=cursor)
        response = get_followers_ids(screen_name=SCREEN_NAME, cursor=cursor)
        ids += response['ids']
        cursor = response['next_cursor']

        print >> sys.stderr, 'Fetched %i total ids for %s' % (len(ids), SCREEN_NAME)

        # Consider storing the ids to disk during each iteration to provide an
        # an additional layer of protection from exceptional circumstances

        if len(ids) >= MAX_IDS:
            break

    # Pegando as informações dos usuários e mostrando na tela
    userIds = get_info_by_id(t, ids)
    print userIds